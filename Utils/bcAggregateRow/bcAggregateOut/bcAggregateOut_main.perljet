<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// searching the incoming schema
IMetadataTable inMetadata = null;
IConnection inConnection = null;

List<? extends IConnection> incomingConnections
    = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
    inConnection = incomingConnections.get(0);
    inMetadata = inConnection.getMetadataTable();
}

// searching the outgoing schema
IMetadataTable metadata = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    metadata = metadatas.get(0);
}

// we only generate output if incoming and outgoing schema are defined
if (inMetadata != null && metadata != null) {
    List<Map<String, String>> operations =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(
            node,
            "__OPERATIONS__"
        );

    List<Map<String, String>> groupbys =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(
            node,
            "__GROUPBYS__"
        );

    String destination = ElementParameterParser.getValue(
        node,
        "__DESTINATION__"
    );

    // We need the name of the input connection and the name of the
    // previous component
    String inputRowName = new String("input_row");
    String prevComponentName = new String("prev_component_name");

    List< ? extends IConnection> inConns = node.getIncomingConnections();
    IConnection inConn = null;
    if (inConns != null && !inConns.isEmpty()) {
        inConn = inConns.get(0);

        inputRowName = inConn.getName();
        prevComponentName = inConn.getMetadataTable().getTableName();
    }

    List<String> hashKeyIndexesArray = new ArrayList<String>();
    StringBuffer hashKey = new StringBuffer();

    for(int i=0; i<groupbys.size(); i++) {
        Map<String, String> groupby = groupbys.get(i);
    
        // search the INPUT_COLUMN in the input schema
        int j = 0;
        for (IMetadataColumn column: inMetadata.getListColumns()) {
            if (column.getLabel().equals(groupby.get("INPUT_COLUMN"))) {
                hashKeyIndexesArray.add(Integer.toString(j));
            }
            j++;
        }
    }

    String hashKeyIndexesString = StringUtils.join(
        hashKeyIndexesArray.toArray(),
        ", "
    );
%>
# <%=hashKeyIndexesString%>
<%

    if (groupbys.size() == 0) {
%>
my $key = "dummy key";
<%
        }
        else {
%>
my $key = join($;, @{$<%=inputRowName%>}[<%=hashKeyIndexesString%>]);
<%
        }
%>
$current_string = $<%=destination%>{$key};
my @current = ();
if (defined $current_string) {
  @current = split($;, $current_string);
}
$<%=destination%>{$key} = join(
    $;,
<%
        for(int opNum = 0; opNum < operations.size(); opNum++) {
            Map<String, String> operation = operations.get(opNum);
            String function = operation.get("FUNCTION");

            StringBuffer operationString = new StringBuffer();
            // operationString must contain something like:
            // $hash{ $row1[0] }{ $row1[1] }{operation1}
            operationString.append("$key_href_");
            operationString.append(cid);
            operationString.append("->{operation");
            operationString.append(opNum);
            operationString.append("}");

            StringBuffer curval = new StringBuffer();
            curval.append("$");
            curval.append(inputRowName);
            curval.append("->[");

            int j = 0;
            for (IMetadataColumn column: inMetadata.getListColumns()) {
                if (column.getLabel().equals(operation.get("INPUT_COLUMN"))) {
                    curval.append(Integer.toString(j));
                }
                j++;
            }

            curval.append("]");

            if (function.equals("sum")) {
%>
    $current[<%=opNum%>] + <%=curval%>,
<%
            }
            else if (function.equals("avg")) {
%>
    ((split(',', $current[<%=opNum%>]))[0] + <%=curval%>).','.((split(',', $current[<%=opNum%>]))[1] + 1),
<%
            }
            else if (function.equals("count")) {
%>
    $current[<%=opNum%>] + 1,
<%
            }
            else if (function.equals("min")) {
%>
    defined $current[<%=opNum%>]
      ? $current[<%=opNum%>] > <%=curval%>
        ? <%=curval%>
        : $current[<%=opNum%>]
      : <%=curval%>,
<%
            }
            else if (function.equals("max")) {
%>
    defined $current[<%=opNum%>]
      ? $current[<%=opNum%>] < <%=curval%>
        ? <%=curval%>
        : $current[<%=opNum%>]
      : <%=curval%>,
<%
            }
            else if (function.equals("first")) {
%>
    defined $current[<%=opNum%>]
      ? $current[<%=opNum%>]
      : <%=curval%>,
<%
            }
            else if (function.equals("last")) {
%>
    <%=curval%>,
<%
            }
        }
%>
);
<%
}
%>
