<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// searching the incoming schema
IMetadataTable inMetadata = null;
IConnection inConnection = null;

List<? extends IConnection> incomingConnections
    = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
    inConnection = incomingConnections.get(0);
    inMetadata = inConnection.getMetadataTable();
}

// searching the outgoing schema
IMetadataTable metadata = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    metadata = metadatas.get(0);
}

// we only generate output if incoming and outgoing schema are defined
if (inMetadata != null && metadata != null) {
    List<Map<String, String>> operations =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(
            node,
            "__OPERATIONS__"
        );

    List<Map<String, String>> groupbys =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(
            node,
            "__GROUPBYS__"
        );

    String origin = ElementParameterParser.getValue(
        node,
        "__ORIGIN__"
    );

%>
foreach my $key (keys %<%=origin%>) {
    my @groupby_columns = split($;, $key);
    my @operation_columns = split($;, $<%=origin%>{$key});

    $<%=cid%> = [
<%
    for (IMetadataColumn column: metadata.getListColumns()) {
        String columnName = column.getLabel();
        boolean columnFound = false;

        // first we search this column among the groupby list
        for(int i=0; i<groupbys.size() && columnFound == false; i++) {
            Map<String, String> groupby = groupbys.get(i);
            if (groupby.get("OUTPUT_COLUMN").equals(columnName)) {
                columnFound = true;
%>
        $groupby_columns[<%=i%>],
<%
            }
        }
        
        // then we search among the operations list
        for(int opNum = 0; opNum < operations.size() && columnFound == false; opNum++) {
            Map<String, String> operation = operations.get(opNum);
            String function = operation.get("FUNCTION");

            if (operation.get("OUTPUT_COLUMN").equals(columnName)) {
                if (function.equals("avg")) {
%>
        ((split(',', $operation_columns[<%=opNum%>]))[0])/((split(',', $operation_columns[<%=opNum%>]))[1]),
<%
                }
                else {
%>
        $operation_columns[<%=opNum%>],
<%
                }
            }
        }
    }
%>
    ];
<%
}
%>
