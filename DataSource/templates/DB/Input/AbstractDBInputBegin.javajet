<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.builder.database.ExtractMetaDataUtils
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType		
		java.util.List
		java.util.Map
		"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	        
	String dbhost = ElementParameterParser.getValue(node, "__HOST__");
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	String dbname = ElementParameterParser.getValue(node, "__DBNAME__");
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
	String dbuser = ElementParameterParser.getValue(node, "__USER__");
	String dbpwd = ElementParameterParser.getValue(node, "__PASS__");
	String dbencoding = ElementParameterParser.getValue(node, "__ENCODING__");
	String enableStream = ElementParameterParser.getValue(node, "__ENABLE_STREAM__");
	String dbms=ElementParameterParser.getValue(node, "__TYPE__");
	
    boolean whetherTrimAllCol = ("true").equals(ElementParameterParser.getValue(node, "__TRIM_ALL_COLUMN__"));
    List<Map<String, String>> trimColumnList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__TRIM_COLUMN__");
    
    dbInputBeginUtil.beforeComponentProcess(node);
    
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas != null) && (metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata != null) {
%>
		    int nb_line_<%=cid%> = 0;
		    java.sql.Connection conn_<%=cid%> = null;
<%
		    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		    if(("true").equals(useExistingConn)) {
		        String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		        String conn = "conn_" + connection;
%>
		        conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%
				dbInputBeginUtil.afterUseExistConnection(node);
		
		    } else {
				dbInputBeginUtil.createConnection(node);
		    }
%>

		    <%dbInputBeginUtil.createStatement(node);%>
		    
		    String dbquery_<%=cid%> = <%=dbInputBeginUtil.getQueryString(node)%>;
		    
		    java.sql.ResultSet rs_<%=cid %> = stmt_<%=cid %>.executeQuery(dbquery_<%=cid%>);
		    java.sql.ResultSetMetaData rsmd_<%=cid %> = rs_<%=cid %>.getMetaData();
		    int colQtyInRs_<%=cid%> = rsmd_<%=cid %>.getColumnCount();

		    globalMap.put("<%=cid %>_QUERY",dbquery_<%=cid%>);

<%
		    List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		    List<IMetadataColumn> columnList = metadata.getListColumns();
		    boolean isDynamic = metadata.isDynamicSchema();
		    if(isDynamic){
		    %>
		    routines.system.Dynamic dcg_<%=cid%> =  new routines.system.Dynamic();
		    List<String> listSchema_<%=cid%>=new java.util.ArrayList<String>();
		    for(int i_<%=cid %>=1; i_<%=cid %><<%=metadata.getListColumns().size()%>; i_<%=cid %>++) {
		    	listSchema_<%=cid%>.add(rsmd_<%=cid%>.getColumnName(i_<%=cid %>).toUpperCase());
			}
            for (int i = <%=metadata.getListColumns().size()%>; i <= rsmd_<%=cid%>.getColumnCount(); i++) {
                if (!(listSchema_<%=cid%>.contains(rsmd_<%=cid%>.getColumnName(i).toUpperCase()) )) {
                	routines.system.DynamicMetadata dcm_<%=cid%>=new routines.system.DynamicMetadata();
                	dcm_<%=cid%>.setName(rsmd_<%=cid%>.getColumnName(i));
                	dcm_<%=cid%>.setDbName(rsmd_<%=cid%>.getColumnName(i));
                	dcm_<%=cid%>.setType(routines.system.Dynamic.getTalendTypeFromDBType("<%=dbms==null?"":dbms.toLowerCase()%>_id", rsmd_<%=cid%>.getColumnTypeName(i), rsmd_<%=cid%>.getPrecision(i), rsmd_<%=cid%>.getScale(i)));
                	dcm_<%=cid%>.setDbType(rsmd_<%=cid%>.getColumnTypeName(i));
                	dcm_<%=cid%>.setLength(rsmd_<%=cid%>.getPrecision(i));
                	dcm_<%=cid%>.setPrecision(rsmd_<%=cid%>.getScale(i));
                	dcm_<%=cid%>.setNullable(rsmd_<%=cid%>.isNullable(i) == 0 ? false : true);
                	dcm_<%=cid%>.setKey(false);
                	dcm_<%=cid%>.setSourceType(DynamicMetadata.sourceTypes.database);
                	dcm_<%=cid%>.setColumnPosition(i);
                	dcg_<%=cid%>.metadatas.add(dcm_<%=cid%>);
                }
            }
<%
		    }
		    %>
		    String tmpContent_<%=cid%> = null;
		    while (rs_<%=cid %>.next()) {
		        nb_line_<%=cid%>++;
		        <%
		        if(conns != null && conns.size() > 0) {
		            IConnection conn = conns.get(0);
		            String firstConnName = conn.getName();
		            int currentColNo = 1;
		            for(IMetadataColumn column : columnList) {
		                boolean whetherTrimCol = false;
		                if((trimColumnList != null && trimColumnList.size() > 0) && !whetherTrimAllCol) {
		                    for(Map<String, String> trimColumn : trimColumnList) {
		                        if(column.getLabel().equals(trimColumn.get("SCHEMA_COLUMN"))) {
		                            if(("true").equals(trimColumn.get("TRIM"))) {
		                                whetherTrimCol = true;
		                                break;
		                            }
		                        }
		                    }
		                }
		                String trimMethod = "";
		                if(whetherTrimAllCol || whetherTrimCol) {
		                    trimMethod = ".trim()";
		                }
		                String columnType = column.getType();
		                 
		                String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
		                String defVal = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate); 	
		                if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		                    %> 	
		                    if(colQtyInRs_<%=cid%> < <%=currentColNo%>) { 		
		                        <%=firstConnName%>.<%=column.getLabel()%> = <%=defVal%>; 			
		                    } else {
<%
		                        typeToGenerate = dbInputBeginUtil.mappingType(typeToGenerate);
		  
		                        if(("Char").equals(typeToGenerate) || ("Character").equals(typeToGenerate)) {
%>
		                 			<%dbInputBeginUtil.generateStringCharAndCharacterSet(firstConnName, column,currentColNo, trimMethod, typeToGenerate, whetherTrimAllCol, whetherTrimCol);%>			
<%
		                        } else if(("Timestamp").equals(typeToGenerate)) {
%>
									<%dbInputBeginUtil.generateTimestampResultSet(firstConnName, column, currentColNo);%>
<%
		                         } else if (("List").equals(typeToGenerate)) {
%>
		                            <%=firstConnName%>.<%=column.getLabel()%> = (List)rs_<%=cid %>.getObject(<%=currentColNo%>);
 <%
		                        } else if(("String").equals(typeToGenerate)) {
%>
		                         <%dbInputBeginUtil.generateStringResultSet(firstConnName, column, currentColNo,trimMethod);%>
<%
								} else if(("Bytes").equals(typeToGenerate) && (columnType != null && (("LONG RAW").equals(columnType) || ("RAW").equals(columnType)))) {//oracle
%>
									<%dbInputBeginUtil.generateBytesResultSet(firstConnName, column, currentColNo);%>
<%
								} else if(("Dynamic").equals(typeToGenerate)) {
%>
                                  <%=firstConnName%>.<%=column.getLabel()%>=dcg_<%=cid%>;
                                  routines.system.DynamicUtils.readColumnsFromDatabase(<%=firstConnName%>.<%=column.getLabel()%>, rs_<%=cid%>);
<%
								} else if(typeToGenerate.equals("Geometry")) {
%>
                                	org.postgis.Geometry o = org.postgis.PGgeometry.geomFromString(rs_<%=cid %>.getObject(<%=currentColNo%>).toString());
                                	StringBuffer sb = new StringBuffer();
                                	o.outerWKT(sb, false);
                                	<%=firstConnName%>.<%=column.getLabel()%> = new Geometry(sb.toString());
<%
                 	            } else {
%>
		                          <%dbInputBeginUtil.generateOthersResultSet( firstConnName, column,  currentColNo,  typeToGenerate);%>
<%
		                        }
%>
								<%dbInputBeginUtil.afterGenertorType( firstConnName, column,  currentColNo);%>
		                    }
<%  
		                    currentColNo++;
		                }
		            }
		            if(conns.size() > 1) {
		                for(int connNO = 1 ; connNO < conns.size() ; connNO++) {
		                    IConnection conn2 = conns.get(connNO);
		                    if((conn2.getName().compareTo(firstConnName) != 0) && (conn2.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA))) {
		                        for(IMetadataColumn column:columnList){
		                            %>
		                            <%=conn2.getName()%>.<%=column.getLabel()%> = <%=firstConnName%>.<%=column.getLabel()%>;
		                            <% 
		                        }
		                    }
		                }
		            }
		        }
		}
	}
%>

