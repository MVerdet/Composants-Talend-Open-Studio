<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String filename = ElementParameterParser.getValue(node, "__FILENAME__");

boolean hash = Boolean.valueOf(ElementParameterParser.getValue(node, "__HASH__"));
String digestMethod = ElementParameterParser.getValue(node, "__DIGEST_METHOD__");

String outputConnName = null;
List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
if (conns!=null) {
	if (conns.size()>0) {
		for (int i=0;i<conns.size();i++) {
			IConnection connTemp = conns.get(i);
			if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				outputConnName = connTemp.getName();
				break;
			}
		}
	}
}

if (outputConnName != null){
%>

java.io.File file_<%=cid %> = new java.io.File(<%=filename %>);
<%=outputConnName %> = new <%=outputConnName %>Struct();

if(file_<%=cid %>.exists()) {
    <%=outputConnName %>.abs_path = file_<%=cid %>.getAbsolutePath();
    <%=outputConnName %>.dirname = file_<%=cid %>.getParent();
    <%=outputConnName %>.basename = file_<%=cid %>.getName();
    <%=outputConnName %>.is_readable = file_<%=cid%>.canRead();
    <%=outputConnName %>.is_writable = file_<%=cid%>.canWrite();
    <%=outputConnName %>.is_executable = file_<%=cid%>.canExecute();
    <%=outputConnName %>.size = file_<%=cid %>.length();
    <%=outputConnName %>.mtime = file_<%=cid %>.lastModified();
    <%=outputConnName %>.owner = java.nio.file.Files.getOwner(file_<%=cid%>.toPath()).toString();
    if(!"Windows".equalsIgnoreCase(System.getProperty("os.name"))) {
      <%=outputConnName %>.permissions = java.nio.file.attribute.PosixFilePermissions.toString(java.nio.file.Files.getPosixFilePermissions(file_<%=cid%>.toPath()));
    } else {
      <%=outputConnName %>.permissions = "";
    }

	<%if(hash){%>
		// Calculation of the Message Digest
		java.io.InputStream is_<%=cid %> = new java.io.FileInputStream(file_<%=cid %>);
		byte[] buffer_<%=cid %> = new byte[8192];
		int read_<%=cid %> = 0;
		java.security.MessageDigest dgs_<%=cid %> = java.security.MessageDigest.getInstance("<%=digestMethod %>");
		while( (read_<%=cid %> = is_<%=cid %>.read(buffer_<%=cid %>)) > 0) {
			dgs_<%=cid %>.update(buffer_<%=cid %>, 0, read_<%=cid %>);
		}
		<%=outputConnName %>.hash =String.format("%032x", new java.math.BigInteger(1, dgs_<%=cid %>.digest()));
		is_<%=cid %>.close();
	<%}%>
}

<%
}
%>
